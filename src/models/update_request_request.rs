/*
 * Overseerr API
 *
 * This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 
 *
 * The version of the OpenAPI document: v1.33.2
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdateRequestRequest {
    #[serde(rename = "mediaType")]
    pub media_type: MediaType,
    #[serde(rename = "seasons", skip_serializing_if = "Option::is_none")]
    pub seasons: Option<Vec<f64>>,
    #[serde(rename = "is4k", skip_serializing_if = "Option::is_none")]
    pub is4k: Option<bool>,
    #[serde(rename = "serverId", skip_serializing_if = "Option::is_none")]
    pub server_id: Option<f64>,
    #[serde(rename = "profileId", skip_serializing_if = "Option::is_none")]
    pub profile_id: Option<f64>,
    #[serde(rename = "rootFolder", skip_serializing_if = "Option::is_none")]
    pub root_folder: Option<String>,
    #[serde(rename = "languageProfileId", skip_serializing_if = "Option::is_none")]
    pub language_profile_id: Option<f64>,
    #[serde(rename = "userId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub user_id: Option<Option<f64>>,
}

impl UpdateRequestRequest {
    pub fn new(media_type: MediaType) -> UpdateRequestRequest {
        UpdateRequestRequest {
            media_type,
            seasons: None,
            is4k: None,
            server_id: None,
            profile_id: None,
            root_folder: None,
            language_profile_id: None,
            user_id: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MediaType {
    #[serde(rename = "movie")]
    Movie,
    #[serde(rename = "tv")]
    Tv,
}

impl Default for MediaType {
    fn default() -> MediaType {
        Self::Movie
    }
}

