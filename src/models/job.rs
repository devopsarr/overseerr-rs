/*
 * Overseerr API
 *
 * This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 
 *
 * The version of the OpenAPI document: v1.34.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Job {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Type>,
    #[serde(rename = "interval", skip_serializing_if = "Option::is_none")]
    pub interval: Option<Interval>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "nextExecutionTime", skip_serializing_if = "Option::is_none")]
    pub next_execution_time: Option<String>,
    #[serde(rename = "running", skip_serializing_if = "Option::is_none")]
    pub running: Option<bool>,
}

impl Job {
    pub fn new() -> Job {
        Job {
            id: None,
            r#type: None,
            interval: None,
            name: None,
            next_execution_time: None,
            running: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "process")]
    Process,
    #[serde(rename = "command")]
    Command,
}

impl Default for Type {
    fn default() -> Type {
        Self::Process
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Interval {
    #[serde(rename = "short")]
    Short,
    #[serde(rename = "long")]
    Long,
    #[serde(rename = "fixed")]
    Fixed,
}

impl Default for Interval {
    fn default() -> Interval {
        Self::Short
    }
}

