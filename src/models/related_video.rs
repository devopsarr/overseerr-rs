/*
 * Overseerr API
 *
 * This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 
 *
 * The version of the OpenAPI document: v1.34.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RelatedVideo {
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(rename = "key", skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "size", skip_serializing_if = "Option::is_none")]
    pub size: Option<f64>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Type>,
    #[serde(rename = "site", skip_serializing_if = "Option::is_none")]
    pub site: Option<Site>,
}

impl RelatedVideo {
    pub fn new() -> RelatedVideo {
        RelatedVideo {
            url: None,
            key: None,
            name: None,
            size: None,
            r#type: None,
            site: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "Clip")]
    Clip,
    #[serde(rename = "Teaser")]
    Teaser,
    #[serde(rename = "Trailer")]
    Trailer,
    #[serde(rename = "Featurette")]
    Featurette,
    #[serde(rename = "Opening Credits")]
    OpeningCredits,
    #[serde(rename = "Behind the Scenes")]
    BehindTheScenes,
    #[serde(rename = "Bloopers")]
    Bloopers,
}

impl Default for Type {
    fn default() -> Type {
        Self::Clip
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Site {
    #[serde(rename = "YouTube")]
    YouTube,
}

impl Default for Site {
    fn default() -> Site {
        Self::YouTube
    }
}

