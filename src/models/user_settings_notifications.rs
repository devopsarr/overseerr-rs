/*
 * Overseerr API
 *
 * This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 
 *
 * The version of the OpenAPI document: v1.33.2
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UserSettingsNotifications {
    #[serde(rename = "notificationTypes", skip_serializing_if = "Option::is_none")]
    pub notification_types: Option<Box<models::NotificationAgentTypes>>,
    #[serde(rename = "emailEnabled", skip_serializing_if = "Option::is_none")]
    pub email_enabled: Option<bool>,
    #[serde(rename = "pgpKey", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub pgp_key: Option<Option<String>>,
    #[serde(rename = "discordEnabled", skip_serializing_if = "Option::is_none")]
    pub discord_enabled: Option<bool>,
    #[serde(rename = "discordEnabledTypes", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub discord_enabled_types: Option<Option<f64>>,
    #[serde(rename = "discordId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub discord_id: Option<Option<String>>,
    #[serde(rename = "pushbulletAccessToken", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub pushbullet_access_token: Option<Option<String>>,
    #[serde(rename = "pushoverApplicationToken", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub pushover_application_token: Option<Option<String>>,
    #[serde(rename = "pushoverUserKey", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub pushover_user_key: Option<Option<String>>,
    #[serde(rename = "telegramEnabled", skip_serializing_if = "Option::is_none")]
    pub telegram_enabled: Option<bool>,
    #[serde(rename = "telegramBotUsername", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub telegram_bot_username: Option<Option<String>>,
    #[serde(rename = "telegramChatId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub telegram_chat_id: Option<Option<String>>,
    #[serde(rename = "telegramSendSilently", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub telegram_send_silently: Option<Option<bool>>,
}

impl UserSettingsNotifications {
    pub fn new() -> UserSettingsNotifications {
        UserSettingsNotifications {
            notification_types: None,
            email_enabled: None,
            pgp_key: None,
            discord_enabled: None,
            discord_enabled_types: None,
            discord_id: None,
            pushbullet_access_token: None,
            pushover_application_token: None,
            pushover_user_key: None,
            telegram_enabled: None,
            telegram_bot_username: None,
            telegram_chat_id: None,
            telegram_send_silently: None,
        }
    }
}

