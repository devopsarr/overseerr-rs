/*
 * Overseerr API
 *
 * This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 
 *
 * The version of the OpenAPI document: v1.33.2
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MovieDetails {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<f64>,
    #[serde(rename = "imdbId", skip_serializing_if = "Option::is_none")]
    pub imdb_id: Option<String>,
    #[serde(rename = "adult", skip_serializing_if = "Option::is_none")]
    pub adult: Option<bool>,
    #[serde(rename = "backdropPath", skip_serializing_if = "Option::is_none")]
    pub backdrop_path: Option<String>,
    #[serde(rename = "posterPath", skip_serializing_if = "Option::is_none")]
    pub poster_path: Option<String>,
    #[serde(rename = "budget", skip_serializing_if = "Option::is_none")]
    pub budget: Option<f64>,
    #[serde(rename = "genres", skip_serializing_if = "Option::is_none")]
    pub genres: Option<Vec<models::Genre>>,
    #[serde(rename = "homepage", skip_serializing_if = "Option::is_none")]
    pub homepage: Option<String>,
    #[serde(rename = "relatedVideos", skip_serializing_if = "Option::is_none")]
    pub related_videos: Option<Vec<models::RelatedVideo>>,
    #[serde(rename = "originalLanguage", skip_serializing_if = "Option::is_none")]
    pub original_language: Option<String>,
    #[serde(rename = "originalTitle", skip_serializing_if = "Option::is_none")]
    pub original_title: Option<String>,
    #[serde(rename = "overview", skip_serializing_if = "Option::is_none")]
    pub overview: Option<String>,
    #[serde(rename = "popularity", skip_serializing_if = "Option::is_none")]
    pub popularity: Option<f64>,
    #[serde(rename = "productionCompanies", skip_serializing_if = "Option::is_none")]
    pub production_companies: Option<Vec<models::ProductionCompany>>,
    #[serde(rename = "productionCountries", skip_serializing_if = "Option::is_none")]
    pub production_countries: Option<Vec<models::MovieDetailsProductionCountriesInner>>,
    #[serde(rename = "releaseDate", skip_serializing_if = "Option::is_none")]
    pub release_date: Option<String>,
    #[serde(rename = "releases", skip_serializing_if = "Option::is_none")]
    pub releases: Option<Box<models::MovieDetailsReleases>>,
    #[serde(rename = "revenue", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub revenue: Option<Option<f64>>,
    #[serde(rename = "runtime", skip_serializing_if = "Option::is_none")]
    pub runtime: Option<f64>,
    #[serde(rename = "spokenLanguages", skip_serializing_if = "Option::is_none")]
    pub spoken_languages: Option<Vec<models::SpokenLanguage>>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    #[serde(rename = "tagline", skip_serializing_if = "Option::is_none")]
    pub tagline: Option<String>,
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[serde(rename = "video", skip_serializing_if = "Option::is_none")]
    pub video: Option<bool>,
    #[serde(rename = "voteAverage", skip_serializing_if = "Option::is_none")]
    pub vote_average: Option<f64>,
    #[serde(rename = "voteCount", skip_serializing_if = "Option::is_none")]
    pub vote_count: Option<f64>,
    #[serde(rename = "credits", skip_serializing_if = "Option::is_none")]
    pub credits: Option<Box<models::MovieDetailsCredits>>,
    #[serde(rename = "collection", skip_serializing_if = "Option::is_none")]
    pub collection: Option<Box<models::MovieDetailsCollection>>,
    #[serde(rename = "externalIds", skip_serializing_if = "Option::is_none")]
    pub external_ids: Option<Box<models::ExternalIds>>,
    #[serde(rename = "mediaInfo", skip_serializing_if = "Option::is_none")]
    pub media_info: Option<Box<models::MediaInfo>>,
    #[serde(rename = "watchProviders", skip_serializing_if = "Option::is_none")]
    pub watch_providers: Option<Vec<Vec<models::WatchProvidersInner>>>,
}

impl MovieDetails {
    pub fn new() -> MovieDetails {
        MovieDetails {
            id: None,
            imdb_id: None,
            adult: None,
            backdrop_path: None,
            poster_path: None,
            budget: None,
            genres: None,
            homepage: None,
            related_videos: None,
            original_language: None,
            original_title: None,
            overview: None,
            popularity: None,
            production_companies: None,
            production_countries: None,
            release_date: None,
            releases: None,
            revenue: None,
            runtime: None,
            spoken_languages: None,
            status: None,
            tagline: None,
            title: None,
            video: None,
            vote_average: None,
            vote_count: None,
            credits: None,
            collection: None,
            external_ids: None,
            media_info: None,
            watch_providers: None,
        }
    }
}

