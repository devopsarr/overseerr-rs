/*
 * Overseerr API
 *
 * This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 
 *
 * The version of the OpenAPI document: v1.33.2
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetRequestCount2XxResponse {
    #[serde(rename = "total", skip_serializing_if = "Option::is_none")]
    pub total: Option<f64>,
    #[serde(rename = "movie", skip_serializing_if = "Option::is_none")]
    pub movie: Option<f64>,
    #[serde(rename = "tv", skip_serializing_if = "Option::is_none")]
    pub tv: Option<f64>,
    #[serde(rename = "pending", skip_serializing_if = "Option::is_none")]
    pub pending: Option<f64>,
    #[serde(rename = "approved", skip_serializing_if = "Option::is_none")]
    pub approved: Option<f64>,
    #[serde(rename = "declined", skip_serializing_if = "Option::is_none")]
    pub declined: Option<f64>,
    #[serde(rename = "processing", skip_serializing_if = "Option::is_none")]
    pub processing: Option<f64>,
    #[serde(rename = "available", skip_serializing_if = "Option::is_none")]
    pub available: Option<f64>,
}

impl GetRequestCount2XxResponse {
    pub fn new() -> GetRequestCount2XxResponse {
        GetRequestCount2XxResponse {
            total: None,
            movie: None,
            tv: None,
            pending: None,
            approved: None,
            declined: None,
            processing: None,
            available: None,
        }
    }
}

