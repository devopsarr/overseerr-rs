/*
 * Overseerr API
 *
 * This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 
 *
 * The version of the OpenAPI document: v1.33.2
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TvDetails {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<f64>,
    #[serde(rename = "backdropPath", skip_serializing_if = "Option::is_none")]
    pub backdrop_path: Option<String>,
    #[serde(rename = "posterPath", skip_serializing_if = "Option::is_none")]
    pub poster_path: Option<String>,
    #[serde(rename = "contentRatings", skip_serializing_if = "Option::is_none")]
    pub content_ratings: Option<Box<models::TvDetailsContentRatings>>,
    #[serde(rename = "createdBy", skip_serializing_if = "Option::is_none")]
    pub created_by: Option<Vec<models::TvDetailsCreatedByInner>>,
    #[serde(rename = "episodeRunTime", skip_serializing_if = "Option::is_none")]
    pub episode_run_time: Option<Vec<f64>>,
    #[serde(rename = "firstAirDate", skip_serializing_if = "Option::is_none")]
    pub first_air_date: Option<String>,
    #[serde(rename = "genres", skip_serializing_if = "Option::is_none")]
    pub genres: Option<Vec<models::Genre>>,
    #[serde(rename = "homepage", skip_serializing_if = "Option::is_none")]
    pub homepage: Option<String>,
    #[serde(rename = "inProduction", skip_serializing_if = "Option::is_none")]
    pub in_production: Option<bool>,
    #[serde(rename = "languages", skip_serializing_if = "Option::is_none")]
    pub languages: Option<Vec<String>>,
    #[serde(rename = "lastAirDate", skip_serializing_if = "Option::is_none")]
    pub last_air_date: Option<String>,
    #[serde(rename = "lastEpisodeToAir", skip_serializing_if = "Option::is_none")]
    pub last_episode_to_air: Option<Box<models::Episode>>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "nextEpisodeToAir", skip_serializing_if = "Option::is_none")]
    pub next_episode_to_air: Option<Box<models::Episode>>,
    #[serde(rename = "networks", skip_serializing_if = "Option::is_none")]
    pub networks: Option<Vec<models::ProductionCompany>>,
    #[serde(rename = "numberOfEpisodes", skip_serializing_if = "Option::is_none")]
    pub number_of_episodes: Option<f64>,
    #[serde(rename = "numberOfSeason", skip_serializing_if = "Option::is_none")]
    pub number_of_season: Option<f64>,
    #[serde(rename = "originCountry", skip_serializing_if = "Option::is_none")]
    pub origin_country: Option<Vec<String>>,
    #[serde(rename = "originalLanguage", skip_serializing_if = "Option::is_none")]
    pub original_language: Option<String>,
    #[serde(rename = "originalName", skip_serializing_if = "Option::is_none")]
    pub original_name: Option<String>,
    #[serde(rename = "overview", skip_serializing_if = "Option::is_none")]
    pub overview: Option<String>,
    #[serde(rename = "popularity", skip_serializing_if = "Option::is_none")]
    pub popularity: Option<f64>,
    #[serde(rename = "productionCompanies", skip_serializing_if = "Option::is_none")]
    pub production_companies: Option<Vec<models::ProductionCompany>>,
    #[serde(rename = "productionCountries", skip_serializing_if = "Option::is_none")]
    pub production_countries: Option<Vec<models::MovieDetailsProductionCountriesInner>>,
    #[serde(rename = "spokenLanguages", skip_serializing_if = "Option::is_none")]
    pub spoken_languages: Option<Vec<models::SpokenLanguage>>,
    #[serde(rename = "seasons", skip_serializing_if = "Option::is_none")]
    pub seasons: Option<Vec<models::Season>>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    #[serde(rename = "tagline", skip_serializing_if = "Option::is_none")]
    pub tagline: Option<String>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
    #[serde(rename = "voteAverage", skip_serializing_if = "Option::is_none")]
    pub vote_average: Option<f64>,
    #[serde(rename = "voteCount", skip_serializing_if = "Option::is_none")]
    pub vote_count: Option<f64>,
    #[serde(rename = "credits", skip_serializing_if = "Option::is_none")]
    pub credits: Option<Box<models::MovieDetailsCredits>>,
    #[serde(rename = "externalIds", skip_serializing_if = "Option::is_none")]
    pub external_ids: Option<Box<models::ExternalIds>>,
    #[serde(rename = "keywords", skip_serializing_if = "Option::is_none")]
    pub keywords: Option<Vec<models::Keyword>>,
    #[serde(rename = "mediaInfo", skip_serializing_if = "Option::is_none")]
    pub media_info: Option<Box<models::MediaInfo>>,
    #[serde(rename = "watchProviders", skip_serializing_if = "Option::is_none")]
    pub watch_providers: Option<Vec<Vec<models::WatchProvidersInner>>>,
}

impl TvDetails {
    pub fn new() -> TvDetails {
        TvDetails {
            id: None,
            backdrop_path: None,
            poster_path: None,
            content_ratings: None,
            created_by: None,
            episode_run_time: None,
            first_air_date: None,
            genres: None,
            homepage: None,
            in_production: None,
            languages: None,
            last_air_date: None,
            last_episode_to_air: None,
            name: None,
            next_episode_to_air: None,
            networks: None,
            number_of_episodes: None,
            number_of_season: None,
            origin_country: None,
            original_language: None,
            original_name: None,
            overview: None,
            popularity: None,
            production_companies: None,
            production_countries: None,
            spoken_languages: None,
            seasons: None,
            status: None,
            tagline: None,
            r#type: None,
            vote_average: None,
            vote_count: None,
            credits: None,
            external_ids: None,
            keywords: None,
            media_info: None,
            watch_providers: None,
        }
    }
}

