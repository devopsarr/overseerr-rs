/*
 * Overseerr API
 *
 * This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 
 *
 * The version of the OpenAPI document: v1.34.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetIssueCount2XxResponse {
    #[serde(rename = "total", skip_serializing_if = "Option::is_none")]
    pub total: Option<f64>,
    #[serde(rename = "video", skip_serializing_if = "Option::is_none")]
    pub video: Option<f64>,
    #[serde(rename = "audio", skip_serializing_if = "Option::is_none")]
    pub audio: Option<f64>,
    #[serde(rename = "subtitles", skip_serializing_if = "Option::is_none")]
    pub subtitles: Option<f64>,
    #[serde(rename = "others", skip_serializing_if = "Option::is_none")]
    pub others: Option<f64>,
    #[serde(rename = "open", skip_serializing_if = "Option::is_none")]
    pub open: Option<f64>,
    #[serde(rename = "closed", skip_serializing_if = "Option::is_none")]
    pub closed: Option<f64>,
}

impl GetIssueCount2XxResponse {
    pub fn new() -> GetIssueCount2XxResponse {
        GetIssueCount2XxResponse {
            total: None,
            video: None,
            audio: None,
            subtitles: None,
            others: None,
            open: None,
            closed: None,
        }
    }
}

