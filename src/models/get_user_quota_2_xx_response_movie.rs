/*
 * Overseerr API
 *
 * This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 
 *
 * The version of the OpenAPI document: v1.34.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetUserQuota2XxResponseMovie {
    #[serde(rename = "days", skip_serializing_if = "Option::is_none")]
    pub days: Option<f64>,
    #[serde(rename = "limit", skip_serializing_if = "Option::is_none")]
    pub limit: Option<f64>,
    #[serde(rename = "used", skip_serializing_if = "Option::is_none")]
    pub used: Option<f64>,
    #[serde(rename = "remaining", skip_serializing_if = "Option::is_none")]
    pub remaining: Option<f64>,
    #[serde(rename = "restricted", skip_serializing_if = "Option::is_none")]
    pub restricted: Option<bool>,
}

impl GetUserQuota2XxResponseMovie {
    pub fn new() -> GetUserQuota2XxResponseMovie {
        GetUserQuota2XxResponseMovie {
            days: None,
            limit: None,
            used: None,
            remaining: None,
            restricted: None,
        }
    }
}

