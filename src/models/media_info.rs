/*
 * Overseerr API
 *
 * This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 
 *
 * The version of the OpenAPI document: v1.33.2
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MediaInfo {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<f64>,
    #[serde(rename = "tmdbId", skip_serializing_if = "Option::is_none")]
    pub tmdb_id: Option<f64>,
    #[serde(rename = "tvdbId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub tvdb_id: Option<Option<f64>>,
    /// Availability of the media. 1 = `UNKNOWN`, 2 = `PENDING`, 3 = `PROCESSING`, 4 = `PARTIALLY_AVAILABLE`, 5 = `AVAILABLE`
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<f64>,
    #[serde(rename = "requests", skip_serializing_if = "Option::is_none")]
    pub requests: Option<Vec<models::MediaRequest>>,
    #[serde(rename = "createdAt", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    #[serde(rename = "updatedAt", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
}

impl MediaInfo {
    pub fn new() -> MediaInfo {
        MediaInfo {
            id: None,
            tmdb_id: None,
            tvdb_id: None,
            status: None,
            requests: None,
            created_at: None,
            updated_at: None,
        }
    }
}

