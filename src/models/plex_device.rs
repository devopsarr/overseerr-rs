/*
 * Overseerr API
 *
 * This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 
 *
 * The version of the OpenAPI document: v1.33.2
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PlexDevice {
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "product")]
    pub product: String,
    #[serde(rename = "productVersion")]
    pub product_version: String,
    #[serde(rename = "platform")]
    pub platform: String,
    #[serde(rename = "platformVersion", skip_serializing_if = "Option::is_none")]
    pub platform_version: Option<String>,
    #[serde(rename = "device")]
    pub device: String,
    #[serde(rename = "clientIdentifier")]
    pub client_identifier: String,
    #[serde(rename = "createdAt")]
    pub created_at: String,
    #[serde(rename = "lastSeenAt")]
    pub last_seen_at: String,
    #[serde(rename = "provides")]
    pub provides: Vec<String>,
    #[serde(rename = "owned")]
    pub owned: bool,
    #[serde(rename = "ownerID", skip_serializing_if = "Option::is_none")]
    pub owner_id: Option<String>,
    #[serde(rename = "home", skip_serializing_if = "Option::is_none")]
    pub home: Option<bool>,
    #[serde(rename = "sourceTitle", skip_serializing_if = "Option::is_none")]
    pub source_title: Option<String>,
    #[serde(rename = "accessToken", skip_serializing_if = "Option::is_none")]
    pub access_token: Option<String>,
    #[serde(rename = "publicAddress", skip_serializing_if = "Option::is_none")]
    pub public_address: Option<String>,
    #[serde(rename = "httpsRequired", skip_serializing_if = "Option::is_none")]
    pub https_required: Option<bool>,
    #[serde(rename = "synced", skip_serializing_if = "Option::is_none")]
    pub synced: Option<bool>,
    #[serde(rename = "relay", skip_serializing_if = "Option::is_none")]
    pub relay: Option<bool>,
    #[serde(rename = "dnsRebindingProtection", skip_serializing_if = "Option::is_none")]
    pub dns_rebinding_protection: Option<bool>,
    #[serde(rename = "natLoopbackSupported", skip_serializing_if = "Option::is_none")]
    pub nat_loopback_supported: Option<bool>,
    #[serde(rename = "publicAddressMatches", skip_serializing_if = "Option::is_none")]
    pub public_address_matches: Option<bool>,
    #[serde(rename = "presence", skip_serializing_if = "Option::is_none")]
    pub presence: Option<bool>,
    #[serde(rename = "connection")]
    pub connection: Vec<models::PlexConnection>,
}

impl PlexDevice {
    pub fn new(name: String, product: String, product_version: String, platform: String, device: String, client_identifier: String, created_at: String, last_seen_at: String, provides: Vec<String>, owned: bool, connection: Vec<models::PlexConnection>) -> PlexDevice {
        PlexDevice {
            name,
            product,
            product_version,
            platform,
            platform_version: None,
            device,
            client_identifier,
            created_at,
            last_seen_at,
            provides,
            owned,
            owner_id: None,
            home: None,
            source_title: None,
            access_token: None,
            public_address: None,
            https_required: None,
            synced: None,
            relay: None,
            dns_rebinding_protection: None,
            nat_loopback_supported: None,
            public_address_matches: None,
            presence: None,
            connection,
        }
    }
}

