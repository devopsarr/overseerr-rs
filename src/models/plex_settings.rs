/*
 * Overseerr API
 *
 * This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 
 *
 * The version of the OpenAPI document: v1.33.2
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PlexSettings {
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "machineId")]
    pub machine_id: String,
    #[serde(rename = "ip")]
    pub ip: String,
    #[serde(rename = "port")]
    pub port: f64,
    #[serde(rename = "useSsl", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub use_ssl: Option<Option<bool>>,
    #[serde(rename = "libraries", skip_serializing_if = "Option::is_none")]
    pub libraries: Option<Vec<models::PlexLibrary>>,
    #[serde(rename = "webAppUrl", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub web_app_url: Option<Option<String>>,
}

impl PlexSettings {
    pub fn new(name: String, machine_id: String, ip: String, port: f64) -> PlexSettings {
        PlexSettings {
            name,
            machine_id,
            ip,
            port,
            use_ssl: None,
            libraries: None,
            web_app_url: None,
        }
    }
}

