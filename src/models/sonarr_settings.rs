/*
 * Overseerr API
 *
 * This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 
 *
 * The version of the OpenAPI document: v1.34.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SonarrSettings {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<f64>,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "hostname")]
    pub hostname: String,
    #[serde(rename = "port")]
    pub port: f64,
    #[serde(rename = "apiKey")]
    pub api_key: String,
    #[serde(rename = "useSsl")]
    pub use_ssl: bool,
    #[serde(rename = "baseUrl", skip_serializing_if = "Option::is_none")]
    pub base_url: Option<String>,
    #[serde(rename = "activeProfileId")]
    pub active_profile_id: f64,
    #[serde(rename = "activeProfileName")]
    pub active_profile_name: String,
    #[serde(rename = "activeDirectory")]
    pub active_directory: String,
    #[serde(rename = "activeLanguageProfileId", skip_serializing_if = "Option::is_none")]
    pub active_language_profile_id: Option<f64>,
    #[serde(rename = "activeAnimeProfileId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub active_anime_profile_id: Option<Option<f64>>,
    #[serde(rename = "activeAnimeLanguageProfileId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub active_anime_language_profile_id: Option<Option<f64>>,
    #[serde(rename = "activeAnimeProfileName", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub active_anime_profile_name: Option<Option<String>>,
    #[serde(rename = "activeAnimeDirectory", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub active_anime_directory: Option<Option<String>>,
    #[serde(rename = "is4k")]
    pub is4k: bool,
    #[serde(rename = "enableSeasonFolders")]
    pub enable_season_folders: bool,
    #[serde(rename = "isDefault")]
    pub is_default: bool,
    #[serde(rename = "externalUrl", skip_serializing_if = "Option::is_none")]
    pub external_url: Option<String>,
    #[serde(rename = "syncEnabled", skip_serializing_if = "Option::is_none")]
    pub sync_enabled: Option<bool>,
    #[serde(rename = "preventSearch", skip_serializing_if = "Option::is_none")]
    pub prevent_search: Option<bool>,
}

impl SonarrSettings {
    pub fn new(name: String, hostname: String, port: f64, api_key: String, use_ssl: bool, active_profile_id: f64, active_profile_name: String, active_directory: String, is4k: bool, enable_season_folders: bool, is_default: bool) -> SonarrSettings {
        SonarrSettings {
            id: None,
            name,
            hostname,
            port,
            api_key,
            use_ssl,
            base_url: None,
            active_profile_id,
            active_profile_name,
            active_directory,
            active_language_profile_id: None,
            active_anime_profile_id: None,
            active_anime_language_profile_id: None,
            active_anime_profile_name: None,
            active_anime_directory: None,
            is4k,
            enable_season_folders,
            is_default,
            external_url: None,
            sync_enabled: None,
            prevent_search: None,
        }
    }
}

